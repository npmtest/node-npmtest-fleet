{"/home/travis/build/npmtest/node-npmtest-fleet/test.js":"/* istanbul instrument in package npmtest_fleet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fleet/lib.npmtest_fleet.js":"/* istanbul instrument in package npmtest_fleet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fleet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fleet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fleet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fleet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fleet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fleet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fleet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fleet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fleet.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fleet.__dirname + '/lib.npmtest_fleet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/index.js":"var argv = require('./lib/argv');\nvar propagit = require('propagit');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction Commands (opts) {\n    this.opts = opts\n}\nCommands.prototype.ps = function (cb) {\n    var p = propagit(this.opts);\n    p.on('error', function (err) {\n        cb(err);\n    });\n    p.hub.on('up', function (hub) {\n        var em = new EventEmitter;\n        var obj = {};\n\n        em.on('data', function (key, procs) {\n            obj[key] = procs\n        });\n\n        em.on('end', function () {\n            cb(null, obj)\n        });\n\n        hub.ps(em.emit.bind(em));\n    });\n}\nCommands.prototype.stop = function (pid, cb) {\n    var self = this;\n    var p = propagit(self.opts);\n    var called = false;\n    p.on('error', function (err) {\n        if (!called) cb(err);\n        called = true;\n    });\n\n    p.hub(function (hub) {\n        var opts = {\n            drone : self.opts.drone,\n            drones : self.opts.drones,\n            pid : pid\n        };\n        hub.stop(opts, function (drone) {\n            p.hub.close();\n            if (!called) cb(null, drone);\n            called = true;\n        });\n    });\n}\n\nmodule.exports = function (opts) {\n    return new Commands(opts);\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/lib/argv.js":"var remote = require('./remote');\nvar argv = module.exports = require('optimist').argv;\n\n// bare args with a leading + are remotes\nvar args = argv._.reduce(function (acc, arg) {\n    if (/^\\+/.test(arg)) acc.remote = arg\n    else acc._.push(arg)\n    return acc;\n}, { _ : [] });\nargv.remote = argv.remote || args.remote;\nargv._ = args._;\n\nif (typeof argv.drone === 'string' && argv.drone.match(/^\\/.*\\/\\w*$/)) {\n    var m = argv.drone.match(/^\\/(.*)\\/(\\w*$)/);\n    argv.drone = new RegExp(m[1], m[2]);\n}\n\nvar target = remote.get(argv.remote || 'default');\nif (target && !argv.hub) argv.hub = target.hub;\nif (target && !argv.secret) argv.secret = target.secret;\nif (target && !argv.repo) argv.repo = target.repo;\n\nif (target && argv.env) {\n    argv.env = argv.env || {};\n    for(var key in target.env) {\n        if (!argv.env[key]) {\n            argv.env[key] = target.env[key];\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/lib/remote.js":"var fs = require('fs');\nvar path = require('path');\nvar existsSync = fs.existsSync || path.existsSync;\n\nvar git = require('./git');\nvar gitDir = git.dir();\nvar fleetFile = gitDir + '/fleet.json';\n\nvar remote = {};\nif (existsSync(fleetFile)) {\n    var obj = JSON.parse(fs.readFileSync(fleetFile));\n    remote = obj.remote || {};\n}\n\nfunction save () {\n    var obj = { remote : remote };\n    fs.writeFileSync(fleetFile, JSON.stringify(obj, undefined, 2) + '\\n');\n}\n\nexports.add = function (name, opts) {\n    remote[name] = opts;\n    save();\n};\n\nexports.remove = function (name) {\n    delete remote[name];\n    save();\n};\n\nexports.list = function () {\n    return remote;\n};\n\nexports.get = function (name) {\n    return remote[name];\n};\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/lib/git.js":"var exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar fs = require('fs');\nvar existsSync = fs.existsSync || path.existsSync;\n\nexports.commit = function (cb) {\n    exec('git log --no-color | head -n1', function (err, stdout, stderr) {\n        if (err) cb(err)\n        else if (stderr) cb(new Error(stderr))\n        else cb(null, stdout.trim().split(/\\s+/)[1]);\n    });\n};\n\nexports.push = function push (remote, branch, cb) {\n    if (typeof branch === 'function') {\n        cb = branch;\n        branch = undefined;\n    }\n    \n    if (!branch) return exports.branchName(function (err, b) {\n        if (err) cb(err)\n        else push(remote, b, cb)\n    });\n    \n    var ps = spawn('git', [ 'push', remote, branch ]);\n\n    ps.stdout.on('data', function (data) {\n      console.log(String(data));\n    });\n\n    ps.stderr.on('data', function (data) {\n      console.error(String(data));\n    });\n\n    ps.on('exit', function (code, sig) {\n        if (code !== 0) cb(new Error('caught signal ' + sig + ', code ' + code))\n        else cb(null)\n    });\n};\n\nexports.repoName = function () {\n    var dir = exports.dir()\n    return dir.split('/').slice(-1)[0];\n};\n\nexports.dir = function (cwd) {\n    var ps = (cwd || process.cwd()).split('/');\n    for (var i = ps.length; i > 0; i--) {\n        var dir = ps.slice(0, i).join('/');\n        if (existsSync(dir + '/.git')) {\n            return dir;\n        }\n    }\n};\n\nexports.branchName = function (cb) {\n    exec('git branch --no-color', function (err, stdout, stderr) {\n        if (err) cb(err)\n        else if (stderr) cb(new Error(stderr))\n        else {\n            var branch = stdout.split('\\n').filter(function (line) {\n                return /^\\*/.test(line)\n            })[0].replace(/^\\*\\s*/, '');\n            cb(null, branch);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/command.sh":"#!/bin/bash\ndirname=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nif test -z \"$*\"; then\n  $dirname/fleet-help\nelif test \"$*\" = '-v' || test \"$*\" = '--version'; then\n  $dirname/fleet-version\nelif test -f \"$dirname/fleet-$1\"; then\n  $dirname/fleet-$*\nelse\n  echo \"Fleet command \\\"$1\\\" not recognized.\"\n  echo 'Type `fleet help` to see a list of all commands.'\nfi\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/deploy.js":"#!/usr/bin/env node\nvar propagit = require('propagit');\n\nvar git = require('../lib/git');\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.log(err.stack || err.toString());\n});\n\np.hub(function (hub) {\n    var opts = {\n        repo : argv.repo || git.repoName(),\n        commit : argv.commit\n    };\n    if (!opts.repo) {\n        console.error('specify --repo or navigate to a git repo');\n        return;\n    }\n    if (!opts.commit) git.commit(function (err, commit) {\n        if (err) {\n            console.error(err);\n            p.hub.close();\n        }\n        else {\n            opts.commit = commit;\n            deploy(hub, opts);\n        }\n    })\n    else deploy(hub, opts);\n});\n\nfunction deploy (hub, opts) {\n    var ref = (function () {\n        var auth = argv.secret\n            ? 'git:' + encodeURIComponent(argv.secret) + '@'\n            : ''\n        ;\n        var uri = argv.git;\n        if (!uri) {\n            var xs = argv.hub.split(':');\n            var gitPort = argv.gitPort\n                || argv.gitport\n                || parseInt(xs[1], 10) + 1\n            ;\n            uri = xs[0] + ':' + gitPort;\n        }\n        var r = opts.repo.replace(/(\\.git)?$/, '.git');\n        return 'http://' + auth + uri + '/' + r;\n    })();\n    \n    git.push(ref, function (err) {\n        if (err) {\n            console.error(err);\n            p.hub.close();\n        }\n        else hub.deploy(opts, function (errors) {\n            if (errors) {\n                errors.forEach(function (err) {\n                    console.error(\n                        '[' + err.drone + '] '\n                        + (err.code === 128 ? 'already at latest' : err)\n                    );\n                });\n            }\n            else {\n                console.log('deployed ' + opts.repo + '/' + opts.commit);\n            }\n            p.hub.close();\n        });\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/drone.js":"#!/usr/bin/env node\nvar argv = require('optimist').argv;\nif (!argv.name) argv.name = require('os').hostname();\n\nvar propagit = require('propagit');\nvar drone = propagit(argv).drone();\n\nvar emit = function () {\n    var args = [].slice.call(arguments);\n    drone.hub(function (hub) {\n        hub.emit.apply(null, args);\n    })\n};\n\ndrone.on('error', function (err) {\n    emit('error', err);\n    console.error(err && err.stack || err);\n});\n\ndrone.on('deploy', function (deploy) {\n    emit('deploy', deploy);\n    console.log(\n        '(deployed '\n        + deploy.repo + '/' + deploy.commit.slice(8)\n        + ')'\n    );\n});\n\ndrone.on('spawn', function (proc) {\n    emit('spawn', proc);\n    console.log(\n        '(spawned ' + proc.id + '#' + proc.repo + '.' + proc.commit.slice(8)\n        + ' : ' + proc.command.join(' ') + ')'\n    );\n});\n\ndrone.on('exit', function (code, sig, opts) {\n    emit('exit', code, sig, opts);\n    console.error(\n        '(exited '\n        + opts.id + '#' + opts.repo + '.' + opts.commit.slice(8)\n        + ' with code ' + code\n        + ' from signal ' + sig\n        + ': ' + opts.command.join(' ')\n        + ')'\n    );\n});\n\ndrone.on('stdout', function (buf, opts) {\n    emit('stdout', buf.toString(), opts);\n    console.log(\n        '[' + opts.id + '#' + opts.repo + '.' + opts.commit.slice(8)\n        + '] ' + buf.toString().replace(/\\n$/, '')\n    );\n});\n\ndrone.on('stderr', function (buf, opts) {\n    emit('stderr', buf.toString(), opts);\n    console.log(\n        '[' + opts.id + '#' + opts.repo + '.' + opts.commit.slice(8)\n        + '] ' + buf.toString().replace(/\\n$/, '')\n    );\n});\n\ndrone.on('up', function () {\n    console.log('connected to the hub');\n});\n\ndrone.on('reconnect', function () {\n    console.log('reconnecting to the hub');\n});\n\ndrone.on('down', function () {\n    console.log('disconnected from the hub');\n});\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/exec.js":"#!/usr/bin/env node\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar propagit = require('propagit');\nvar git = require('../lib/git');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.dir(err);\n});\n\np.hub(function (hub) {\n    var opts = {\n        drone : argv.drone,\n        drones : argv.drones,\n        repo : argv.repo || git.repoName(),\n        commit : argv.commit,\n        command : argv._,\n        env : argv.env || {},\n        cwd : argv.cwd,\n        once : true\n    };\n    if (!opts.repo) {\n        console.error('specify --repo or navigate to a git repo');\n        return;\n    }\n    if (!opts.commit) git.commit(function (err, commit) {\n        if (err) {\n            console.error(err);\n            p.hub.close();\n        }\n        else {\n            opts.commit = commit;\n            spawn(hub, opts);\n        }\n    })\n    else spawn(hub, opts);\n});\n\nfunction spawn (hub, opts) {\n    var em = new EventEmitter;\n    hub.subscribe(em.emit.bind(em));\n    em.on('ready', function () {\n        hub.spawn(opts, function (err, procs) {\n            if (err) {\n                console.error(err)\n                p.hub.close();\n                return;\n            }\n            \n            em.on('stdout', function (buf, proc) {\n                if (procs[proc.drone] !== proc.id) return;\n                console.log(\n                    '[' + proc.drone + '#' + proc.id + '] '\n                    + buf.replace(/\\n$/, '')\n                );\n            });\n            em.on('stderr', function (buf, proc) {\n                if (procs[proc.drone] !== proc.id) return;\n                console.log(\n                    '[' + proc.drone + '#' + proc.id + '] '\n                    + buf.replace(/\\n$/, '')\n                );\n            });\n            \n            var pending = Object.keys(procs).length;\n            em.on('exit', function (code, sig, proc) {\n                if (procs[proc.drone] !== proc.id) return;\n                console.log('(' + proc.drone + '#' + proc.id + ' exited)');\n                \n                if (--pending === 0) p.hub.close();\n            });\n        });\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/hub.js":"#!/usr/bin/env node\nvar propagit = require('propagit');\nvar argv = require('optimist').argv;\n\nvar cport = argv.cport || argv.port || argv._[0];\nvar gport = argv.gport || cport + 1;\n\nvar prop = propagit(argv).listen(cport, gport);\n\nvar subs = {};\nprop.use(function (service, conn) {\n    service.emit = function () {\n        var args = [].slice.call(arguments);\n        Object.keys(subs).forEach(function (key) {\n            subs[key].apply(null, args);\n        });\n    };\n    \n    service.subscribe = function (emit) {\n        if (typeof emit === 'function') {\n            conn.once('end', function () {\n                delete subs[conn.id];\n            });\n            subs[conn.id] = emit;\n            emit('ready');\n        }\n    };\n});\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/monitor.js":"#!/usr/bin/env node\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar propagit = require('propagit');\nvar EventEmitter = require('events').EventEmitter;\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.dir(err);\n});\n\np.hub.on('up', function (hub) {\n    var em = new EventEmitter;\n    \n    em.on('deploy', function (deploy) {\n        console.log(\n            '(deployed '\n            + deploy.drone + '#' + deploy.repo + '/' + deploy.commit\n            + ')'\n        );\n    });\n    \n    em.on('spawn', function (proc) {\n        console.log(\n            '(spawned '\n            + proc.drone + '#' + proc.id\n            + ' : ' + proc.command.join(' ')\n            + ')'\n        );\n    });\n    \n    em.on('stdout', function (buf, proc) {\n        console.log(\n            '[' + proc.drone + '#' + proc.id + '] '\n            + buf.replace(/\\n$/, '')\n        );\n    });\n    \n    em.on('stderr', function (buf, proc) {\n        console.log(\n            '[' + proc.drone + '#' + proc.id + '] '\n            + buf.replace(/\\n$/, '')\n        );\n    });\n    \n    em.on('exit', function (code, sig, proc) {\n        console.log(\n            '(exited '\n            + proc.drone + '#' + proc.id\n            + ' : ' + proc.command.join(' ')\n            + ')'\n        );\n    });\n    \n    hub.subscribe(em.emit.bind(em));\n});\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/ps.js":"#!/usr/bin/env node\nvar EventEmitter = require('events').EventEmitter;\n\nvar propagit = require('propagit');\nvar archy = require('archy');\n\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.dir(err);\n});\n\np.hub.on('up', argv.json ? raw : text);\n\nfunction text (hub) {\n    var em = new EventEmitter;\n    \n    em.on('data', function (key, procs) {\n        var s = archy({\n            label : 'drone#' + key,\n            nodes : Object.keys(procs).map(function (id) {\n                var p = procs[id];\n                return {\n                    label : 'pid#' + id,\n                    nodes : [\n                        'status:   ' + p.status,\n                        'commit:   ' + p.repo + '/' + p.commit,\n                        'command:  ' + p.command.join(' '),\n                    ],\n                }\n            }),\n        });\n        console.log(Object.keys(procs).length ? s : s.replace(/\\n$/, ''));\n    });\n    \n    em.on('end', function () {\n        p.hub.close();\n    });\n    \n    hub.ps(em.emit.bind(em));\n}\n\nfunction raw (hub) {\n    var em = new EventEmitter;\n    console.log('{');\n    var ix = 0;\n    \n    em.on('data', function (key, procs) {\n        if (ix++ > 0) process.stdout.write(',\\n');\n        \n        process.stdout.write(\n            '  ' + JSON.stringify(key) + ' : '\n            + JSON.stringify(procs).replace(/\\n/g, '\\n  ')\n        );\n    });\n    \n    em.on('end', function () {\n        console.log('\\n}');\n        p.hub.close();\n    });\n    \n    hub.ps(em.emit.bind(em));\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/remote.js":"#!/usr/bin/env node\nvar argv = require('optimist').argv;\nvar fs = require('fs');\nvar path = require('path');\n\nvar git = require('../lib/git');\nvar remote = require('../lib/remote');\n\nvar cmd = argv._[0];\n\nif (cmd === 'add') {\n    var name = argv._[1] || 'default';\n    remote.add(name, { hub : argv.hub, secret : argv.secret, env: argv.env });\n}\nelse if (cmd === 'rm' || cmd === 'remove') {\n    var name = argv._[1] || 'default';\n    remote.remove(name);\n}\nelse if (cmd === 'ls' || cmd === 'list') {\n    console.log(JSON.stringify(remote.list(), undefined, 2));\n}\nelse {\n    console.error('Usage: fleet remote (add|rm|ls)');\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/rootdir.js":"#!/usr/bin/env node\nvar path = require('path');\nconsole.log(path.normalize(__dirname + '/..'));\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/spawn.js":"#!/usr/bin/env node\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar propagit = require('propagit');\nvar git = require('../lib/git');\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.dir(err);\n});\n\np.hub(function (hub) {\n    var opts = {\n        drone : argv.drone,\n        drones : argv.drones,\n        repo : argv.repo || git.repoName(),\n        commit : argv.commit,\n        command : argv._,\n        env : argv.env || {},\n    };\n    if (!opts.repo) {\n        console.error('specify --repo or navigate to a git repo');\n        return;\n    }\n    if (!opts.commit) git.commit(function (err, commit) {\n        if (err) {\n            console.error(err);\n            p.hub.close();\n        }\n        else {\n            opts.commit = commit;\n            spawn(hub, opts);\n        }\n    })\n    else spawn(hub, opts);\n});\n\nfunction spawn (hub, opts) {\n    hub.spawn(opts, function (err, procs) {\n        Object.keys(procs).forEach(function (droneId) {\n            var id = procs[droneId];\n            console.log('(spawned ' + droneId + '#' + id + ')');\n        });\n        p.hub.close();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/stop.js":"#!/usr/bin/env node\nvar argv = require('../lib/argv');\nif (!argv.hub) return console.error('Specify a --hub or set a remote.');\n\nvar propagit = require('propagit');\nvar git = require('../lib/git');\n\nvar p = propagit(argv);\np.on('error', function (err) {\n    console.dir(err);\n});\n\nif (argv._.length === 0) {\n    console.error('Usage: fleet stop PID');\n    process.exit();\n}\n\np.hub(function (hub) {\n    var opts = {\n        drone : argv.drone,\n        drones : argv.drones,\n        pid : argv._.map(function (x) { return x.toString().replace(/^pid#/, '') }),\n    };\n    hub.stop(opts, function (err, drones) {\n        Object.keys(drones).forEach(function (id) {\n            console.log('[' + id + '] stopped ' + drones[id].join(' '));\n        });\n        p.hub.close();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-fleet/node_modules/fleet/bin/version.js":"#!/usr/bin/env node\nconsole.log(require('../package.json').version);\n"}